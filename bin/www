// 模块依赖
var app = require('../app');
var debug = require('debug')('chenyun:server');
var http = require('http');

// 建立服务器
var port = normalizePort(process.env.PORT || app.get('port')); // env.PORT: linux环境下？
app.set('port', port);

var server = http.createServer(app);

// 监听端口
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 自定义函数
/// 处理端口数据类型
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}
/// 服务器进行listening操作 触发的事件
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind); // 需要先在命令设置环境变量`set debug=chenyun:*`
}
/// http 服务器请求错误 回调事件
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
}